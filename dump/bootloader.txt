HELO
CPUI
L1CI
HELO
CPUI
L1CI
DRAM
----
PHYS
STRF
400H
PHYE
DDR3
SIZ4
SIZ3
DINT
USYN
LSYN
MFAS
LMBE
RACE
PASS
----
ZBSS
CODE
DATA
L12F
MAIN
FPS0
SVOL
NGEO
FVLY
FVLY
RVOL
J2EP


CFE version 1.0.38-114.185 for BCM963268 (32bit,SP,BE)
Build Date: Fri Feb 12 16:14:38 CET 2016 (g108848@rmm08064)
Copyright (C) 2000-2011 Broadcom Corporation.

CFE (soft test)
NAND flash device: name Micron MT29F1G08AAC, id 0x2cf1 block 128KB size 131072KB
Access type is MDIO_BUS
External switch id = 53125 
Board Id = F@ST3865b
External switch (2) for Quantenna enabled
Chip ID: BCM63168D0, MIPS: 400MHz, DDR: 400MHz, Bus: 200MHz
Main Thread: TP0
Memory Test Passed
Total Memory: 268435456 bytes (256MB)
Boot Address: 0xb8000000

NextLevelBoot U-boot @ 0x8ff00000

Correctable ECC Error detected: addr=0x0001ea00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x0001ea00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x00100000, intrCtrl=0x000000B0, accessCtrl=0xF7441010
Board IP address                  : 192.168.1.1:ffffff00  
Host IP address                   : 192.168.1.100  
Gateway IP address                :   
Run from flash/host (f/h)         : f  
Default host run file name        : vmlinux  
Default host flash file name      : bcm963xx_fs_kernel  
Boot delay (0-9 seconds)          : 1  
Launch linux/uboot (l/u)          : l  
Board Id (0-14)                   : F@ST3865b  
Number of MAC Addresses (1-32)    : 10  
Base MAC Address                  : 00:10:18:00:00:00  
PSI Size (1-64) KBytes            : 24  
Enable Backup PSI [0|1]           : 0  
System Log Size (0-256) KBytes    : 0  
Auxillary File System Size Percent: 0  
Main Thread Number [0|1]          : 0  

Correctable ECC Error detected: addr=0x0001ea00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x0001ea00, intrCtrl=0x00000090, accessCtrl=0xF7441010
BBox3-11ac LEDs(ff)
*** Press any key to stop auto run (1 seconds) ***
Auto run second count down: 111
CFE> web info: Waiting for connection on socket 0.[J
CFE>       help
Available commands:

phy                 Read/Write phy registers.
sm                  Set memory or registers.
dm                  Dump memory or registers.
w                   Write the whole image start from beginning of the flash
e                   Erase NAND flash
r                   Run program from flash image or from host depend on [f/h] flag
p                   Print boot line and board parameter info
c                   Change booline parameters
i                   Erase persistent storage data
a                   Change board AFE ID
b                   Change board parameters
reset               Reset the board
force               override chipid check for images.
help                Obtain help for CFE commands

For more information about a command, enter 'help command-name'
*** command status = 0
CFE> p
Board IP address                  : 192.168.1.1:ffffff00  
Host IP address                   : 192.168.1.100  
Gateway IP address                :   
Run from flash/host (f/h)         : f  
Default host run file name        : vmlinux  
Default host flash file name      : bcm963xx_fs_kernel  
Boot delay (0-9 seconds)          : 1  
Launch linux/uboot (l/u)          : l  
Board Id (0-14)                   : F@ST3865b  
Number of MAC Addresses (1-32)    : 10  
Base MAC Address                  : 00:10:18:00:00:00  
PSI Size (1-64) KBytes            : 24  
Enable Backup PSI [0|1]           : 0  
System Log Size (0-256) KBytes    : 0  
Auxillary File System Size Percent: 0  
Main Thread Number [0|1]          : 0  

*** command status = 0
CFE> dm
dm address_in_hex length_in_decimal
*** command status = 0
CFE> w

     eg. w [hostip:]whole_image_file_name

*** command status = -2
CFE> reset

Resetting board in 0 seconds...HELO
CPUI
L1CI
HELO
CPUI
L1CI
DRAM
----
PHYS
STRF
400H
PHYE
DDR3
SIZ4
SIZ3
DINT
USYN
LSYN
MFAS
LMBE
RACE
PASS
----
ZBSS
CODE
DATA
L12F
MAIN
FPS0
SVOL
NGEO
FVLY
FVLY
RVOL
J2EP


CFE version 1.0.38-114.185 for BCM963268 (32bit,SP,BE)
Build Date: Fri Feb 12 16:14:38 CET 2016 (g108848@rmm08064)
Copyright (C) 2000-2011 Broadcom Corporation.

CFE (soft test)
NAND flash device: name Micron MT29F1G08AAC, id 0x2cf1 block 128KB size 131072KB
Access type is MDIO_BUS
External switch id = 53125 
Board Id = F@ST3865b
External switch (2) for Quantenna enabled
Chip ID: BCM63168D0, MIPS: 400MHz, DDR: 400MHz, Bus: 200MHz
Main Thread: TP0
Memory Test Passed
Total Memory: 268435456 bytes (256MB)
Boot Address: 0xb8000000

NextLevelBoot U-boot @ 0x8ff00000

Correctable ECC Error detected: addr=0x00100000, intrCtrl=0x000000B0, accessCtrl=0xF7441010
Board IP address                  : 192.168.1.1:ffffff00  
Host IP address                   : 192.168.1.100  
Gateway IP address                :   
Run from flash/host (f/h)         : f  
Default host run file name        : vmlinux  
Default host flash file name      : bcm963xx_fs_kernel  
Boot delay (0-9 seconds)          : 1  
Launch linux/uboot (l/u)          : l  
Board Id (0-14)                   : F@ST3865b  
Number of MAC Addresses (1-32)    : 10  
Base MAC Address                  : 00:10:18:00:00:00  
PSI Size (1-64) KBytes            : 24  
Enable Backup PSI [0|1]           : 0  
System Log Size (0-256) KBytes    : 0  
Auxillary File System Size Percent: 0  
Main Thread Number [0|1]          : 0  

BBox3-11ac LEDs(ff)
*** Press any key to stop auto run (1 seconds) ***
Auto run second count down: 110
Initializing UBI to launch u-boot!
UBI volume uboot has id 1
Correctable ECC Error detected: addr=0x0014a000, intrCtrl=0x000000B0, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x0014d600, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x00150800, intrCtrl=0x000000B0, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x00159200, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x00162e00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x00163800, intrCtrl=0x000000B0, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x00163e00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x00166e00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x00170a00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x00175600, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x00179200, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x0017ac00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x0017c800, intrCtrl=0x000000B0, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x00181800, intrCtrl=0x000000B0, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x0018d200, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x00192e00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x0019e400, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x0019fc00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001a1400, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001a1a00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001a3e00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001ab600, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001b3400, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001b8a00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001ba200, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001bb400, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001bd800, intrCtrl=0x000000B0, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001c1c00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001c2400, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001c2600, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001d2000, intrCtrl=0x000000B0, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001dda00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001e3800, intrCtrl=0x000000B0, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001e5200, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001e7600, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001e7e00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001e9200, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001ebe00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001ede00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001f4e00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001f8600, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001f8c00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x001fa600, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x00202200, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x00209800, intrCtrl=0x000000B0, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x0020ae00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x0020b400, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x0020ca00, intrCtrl=0x00000090, accessCtrl=0xF7441010
Correctable ECC Error detected: addr=0x00214a00, intrCtrl=0x00000090, accessCtrl=0xF7441010
read 842532 bytes from UBI volume 1
BBox3-11ac LEDs(80)
Ubi U-Boot Entry at 0x8ff00000
Closing network.
Disabling Switch ports.
Flushing Receive Buffers...
0 buffers found.
Closing DMA Channels.
Starting program at 0x8ff00000

U-Boot 2011.12
Version: 5.28.0-full (Feb 12 2016 - 16:14:33) 
Copyright (C) 2011 - 2013 Sagemcom All rights reserved
gpio in: 0x40dddf1d 
board type: 00020010
board memsize : 0x10000000
CPU: Broadcom BCM63168D0
DRAM:  256 MiB
NAND:  bcm63xxx nand initialization
handle_acc_control: default CORR ERR threshold  1 bits
ACC: 16 OOB bytes per 512B ECC step; from ID probe: 16
reqEccLevel=0, eccLevel=4
128 MiB
Creating 1 MTD partitions on "nand0":
0x0000000c0000-0x000007b00000 : "mtd=1"
UBI: attaching mtd1 to ubi0
UBI: physical eraseblock size:   131072 bytes (128 KiB)
UBI: logical eraseblock size:    126976 bytes
UBI: smallest flash I/O unit:    2048
UBI: VID header offset:          2048 (aligned 2048)
UBI: data offset:                4096
brcmnand_ctrl_verify_ecc: Correctable ECC error at 00000000:00100000
UBI: fixable bit-flip detected at PEB 2:0
brcmnand_ctrl_verify_ecc: Correctable ECC error at 00000000:00420600
UBI: fixable bit-flip detected at PEB 27:0
brcmnand_ctrl_verify_ecc: Correctable ECC error at 00000000:01060400
UBI: fixable bit-flip detected at PEB 125:0
brcmnand_ctrl_verify_ecc: Correctable ECC error at 00000000:01540000
UBI: fixable bit-flip detected at PEB 164:0
brcmnand_ctrl_verify_ecc: Correctable ECC error at 00000000:01680200
UBI: fixable bit-flip detected at PEB 174:0
brcmnand_ctrl_verify_ecc: Correctable ECC error at 00000000:03080600
UBI: fixable bit-flip detected at PEB 382:0
brcmnand_ctrl_verify_ecc: Correctable ECC error at 00000000:04740000
UBI: fixable bit-flip detected at PEB 564:0
brcmnand_ctrl_verify_ecc: Correctable ECC error at 00000000:04820400
UBI: fixable bit-flip detected at PEB 571:0
brcmnand_ctrl_verify_ecc: Correctable ECC error at 00000000:048c0000
brcmnand_ctrl_verify_ecc: Correctable ECC error at 00000000:048c0600
UBI: fixable bit-flip detected at PEB 576:0
brcmnand_ctrl_verify_ecc: Correctable ECC error at 00000000:05f60000
UBI: fixable bit-flip detected at PEB 757:0
brcmnand_ctrl_verify_ecc: Correctable ECC error at 00000000:05fe0000
UBI: fixable bit-flip detected at PEB 761:0
brcmnand_ctrl_verify_ecc: Correctable ECC error at 00000000:06700200
UBI: fixable bit-flip detected at PEB 818:0
brcmnand_ctrl_verify_ecc: Correctable ECC error at 00000000:06a40600
UBI: fixable bit-flip detected at PEB 844:0
UBI: attached mtd1 to ubi0
UBI: MTD device name:            "mtd=1"
UBI: MTD device size:            122 MiB
UBI: number of good PEBs:        978
UBI: number of bad PEBs:         0
UBI: max. allowed volumes:       128
UBI: wear-leveling threshold:    256
UBI: number of internal volumes: 1
UBI: number of user volumes:     7
UBI: available PEBs:             85
UBI: total number of reserved PEBs: 893
UBI: number of PEBs reserved for bad PEB handling: 9
UBI: max/mean erase counter: 658/157
Volume bootenv not found!
*** Warning - bad CRC, using default environment

Net:   BCM63xxx
Hit any key to stop autoboot:  3  0 
f3865 >                                                           help
?       - alias for 'help'
base    - print or set address offset
bcmled  - bcmled led_hex_value

boot    - boot default, i.e., run 'bootcmd'
bootd   - boot default, i.e., run 'bootcmd'
bootm   - boot application image from memory
bootp   - boot image via network using BOOTP/TFTP protocol
chpart  - change active partition
cie     - displays the CIE parameter
cie_set - sets the CIE parameter
cmp     - memory compare
cp      - memory copy
crc32   - checksum calculation
dfa     - displays the DFA parameter
dfa_set - sets the DFA parameter
dhcp    - boot image via network using DHCP/TFTP protocol
editenv - edit environment variable
env     - environment handling commands
flag    - displays the factory flags
flag_set- sets one factory flag
fsinfo  - print information about filesystems
fsload  - load binary file from a filesystem image
go      - start application at address 'addr'
help    - print command description/usage
iminfo  - print header information for application image
itest   - return true/false on integer compare
loop    - infinite loop on address range
ls      - list files in a directory (default /)
md      - memory display
mii     - MII utility commands
mm      - memory modify (auto-incrementing address)
mtdparts- define flash/nand partitions
mtest   - simple RAM read/write test
mw      - memory write (fill)
nand    - NAND sub-system
nboot   - boot from NAND device
nm      - memory modify (constant address)
ping    - send ICMP ECHO_REQUEST to network host
printenv- print environment variables
reset   - Perform RESET of the CPU
run     - run commands in an environment variable
saveenv - save environment variables to persistent storage
sb      - secure boot
secure_set- sets the bootloader in secure mode
setenv  - set environment variables
sleep   - delay execution for some time
source  - run script from memory
tftpboot- boot image via network using TFTP protocol
ubi     - ubi commands
ubifsload- load file from an UBIFS filesystem
ubifsls - list files in a directory
ubifsmount- mount UBIFS volume
ubifsumount- unmount UBIFS volume
version - print monitor, compiler and linker version
waitForMagic- Test WAIT_FOR_MAGIC function
f3865 > base
Base Address: 0x00000000
f3865 > cie
253693479B1
f3865 > dfa
RG802029881
f3865 > en  flag
1  OFF
2  OFF
3  OFF
4  OFF
5  OFF
6  OFF
7  OFF
8  OFF
f3865 > iminfo

## Checking Image at 80400000 ...
Unknown image format!
f3865 > ubi   printenv
_platform=sc_bcm63xxx
_select_boot=ubi part ${part_boot}
_select_main=ubi part ${part_main}
_tftp_gsdf_oper=tftpboot ${_platform}.scos.oper.gsdf
_tftp_gsdf_resc=tftpboot ${_platform}.scos.resc.gsdf
_tftp_ipl=tftpboot ${_platform}.fboot.fbin
_tftp_oldipl=tftpboot ${_platform}.oldfboot.fbin
_tftp_olduboot=tftpboot ${_platform}.oldu-boot.bin
_tftp_oper=tftpboot ${_platform}.scos.oper.secure
_tftp_pp=tftpboot ${_platform}.ppBIN
_tftp_resc=tftpboot ${_platform}.scos.resc.secure
_tftp_spl=tftpboot ${_platform}.sboot.sbin
_tftp_uboot=tftpboot ${_platform}.u-boot.bin
_ubi_eraze=nand erase 0xC0000 0x7A40000; run _select_main
_ubi_mkvol1=ubi create operational 0x1f00000 static
_ubi_mkvol2=ubi create permanent_param 0x1f000 static; ubi create rescue 0x1f00000 static
_write_ipl=nand erase 0x00000 0x20000; nand write 0x80400000 0x00000 0x9000
_write_oldipl=nand erase 0x00000 0x20000; nand write 0x80400000 0x00000 0x20000
_write_olduboot=nand erase 0x40000 0x80000; nand write 0x80400000 0x40000 0x60000
_write_oper=ubi remove operational; ubi create operational 0x1f00000 static; ubi write 0x80400000 operational ${filesize}
_write_pp=ubi remove permanent_param; ubi create permanent_param 0x1f000 static; ubi write 0x80400000 permanent_param ${filesize}
_write_resc=ubi remove rescue; ubi create rescue 0x1f00000 static; ubi write 0x80400000 rescue ${filesize}
_write_spl=ubi remove secondaryboot; ubi create secondaryboot ${filesize} static; ubi write 0x80400000 secondaryboot ${filesize} 
_write_uboot=ubi remove uboot; ubi remove bootenv; ubi create uboot ${filesize} static; ubi write 0x80400000 uboot ${filesize} 
baudrate=115200
bootargs=### no default boot args ###
bootcmd=sb
bootdelay=3
ethact=BCM63xxx
ethaddr=00:01:02:03:04:05
ipaddr=192.168.1.1
load_allboot=run _select_boot _tftp_uboot _tftp_spl _tftp_ipl _tftp_uboot _write_uboot _tftp_spl _write_spl _tftp_ipl _write_ipl
load_gsdf_oper=run _select_main _tftp_gsdf_oper _write_oper 
load_gsdf_resc=run _select_main _tftp_gsdf_resc _write_resc 
load_ipl=run _tftp_ipl _write_ipl 
load_oldboot=run _select_boot _tftp_olduboot  _tftp_oldipl _tftp_olduboot _write_olduboot _tftp_oldipl _write_oldipl
load_oldipl=run _tftp_oldipl _write_oldipl 
load_olduboot=run _tftp_olduboot _write_olduboot 
load_oper=run _select_main _tftp_oper _write_oper 
load_pp=run _select_main _tftp_pp _write_pp 
load_resc=run _select_main _tftp_resc _write_resc 
load_spl=run _select_boot _tftp_spl _write_spl 
load_uboot=run _select_boot _tftp_uboot _write_uboot 
mtdparts=mtdparts=nand:768k(bcm),125184k(partAll),5120k(data)
nc=setenv stdout nc;setenv stdin nc
ncip=192.168.1.10
netretry=once
part_boot=partAll
part_main=partAll
reset_env=run _select_boot; ubi remove bootenv; ubi create bootenv 0x1f000
serverip=192.168.1.10
stderr=serial
stdin=serial
stdout=serial
ubi_init=run _ubi_eraze; run _ubi_mkvol1; run _ubi_mkvol2

Environment size: 2978/126972 bytes
f3865 > help
?       - alias for 'help'
base    - print or set address offset
bcmled  - bcmled led_hex_value

boot    - boot default, i.e., run 'bootcmd'
bootd   - boot default, i.e., run 'bootcmd'
bootm   - boot application image from memory
bootp   - boot image via network using BOOTP/TFTP protocol
chpart  - change active partition
cie     - displays the CIE parameter
cie_set - sets the CIE parameter
cmp     - memory compare
cp      - memory copy
crc32   - checksum calculation
dfa     - displays the DFA parameter
dfa_set - sets the DFA parameter
dhcp    - boot image via network using DHCP/TFTP protocol
editenv - edit environment variable
env     - environment handling commands
flag    - displays the factory flags
flag_set- sets one factory flag
fsinfo  - print information about filesystems
fsload  - load binary file from a filesystem image
go      - start application at address 'addr'
help    - print command description/usage
iminfo  - print header information for application image
itest   - return true/false on integer compare
loop    - infinite loop on address range
ls      - list files in a directory (default /)
md      - memory display
mii     - MII utility commands
mm      - memory modify (auto-incrementing address)
mtdparts- define flash/nand partitions
mtest   - simple RAM read/write test
mw      - memory write (fill)
nand    - NAND sub-system
nboot   - boot from NAND device
nm      - memory modify (constant address)
ping    - send ICMP ECHO_REQUEST to network host
printenv- print environment variables
reset   - Perform RESET of the CPU
run     - run commands in an environment variable
saveenv - save environment variables to persistent storage
sb      - secure boot
secure_set- sets the bootloader in secure mode
setenv  - set environment variables
sleep   - delay execution for some time
source  - run script from memory
tftpboot- boot image via network using TFTP protocol
ubi     - ubi commands
ubifsload- load file from an UBIFS filesystem
ubifsls - list files in a directory
ubifsmount- mount UBIFS volume
ubifsumount- unmount UBIFS volume
version - print monitor, compiler and linker version
waitForMagic- Test WAIT_FOR_MAGIC function
f3865 > nand
nand - NAND sub-system

Usage:
nand info - show available NAND devices
nand device [dev] - show or set current device
nand read - addr off|partition size
nand write - addr off|partition size
    read/write 'size' bytes starting at offset 'off'
    to/from memory address 'addr', skipping bad blocks.
nand read.raw - addr off|partition [count]
nand write.raw - addr off|partition [count]
    Use read.raw/write.raw to avoid ECC and access the flash as-is.
nand erase[.spread] [clean] off size - erase 'size' bytes from offset 'off'
    With '.spread', erase enough for given file size, otherwise,
    'size' includes skipped bad blocks.
nand erase.part [clean] partition - erase entire mtd partition'
nand erase.chip [clean] - erase entire chip'
nand bad - show bad blocks
nand dump[.oob] off - dump page
nand scrub [-y] off size | scrub.part partition | scrub.chip
    really clean NAND erasing bad blocks (UNSAFE)
nand markbad off [...] - mark bad block(s) at offset (UNSAFE)
nand biterr off - make a bit error at offset (UNSAFE)nand rnderrs n seed- make n random bit errors (UNSAFE)
nand bbt - show bad blocks table
nand trace [on|off] - trace NAND access 
f3865 > nand info

Device 0: nand0, sector size 128 KiB
  Page size      2048 b
  OOB size         64 b
  Erase size   131072 b
f3865 > ubi
ubi - ubi commands

Usage:
ubi part [part] [offset]
 - Show or set current partition (with optional VID header offset)
ubi info [l[ayout]] - Display volume and ubi layout information
ubi create[vol] volume [size] [type] - create volume name with size
ubi write[vol] address volume size - Write volume from address with size
ubi read[vol] address volume [size] - Read volume to address with size
ubi remove[vol] volume - Remove volume
[Legends]
 volume: character name
 size: specified in bytes
 type: s[tatic] or d[ynamic] (default=dynamic)
f3865 > ubi info
UBI: MTD device name:            "mtd=1"
UBI: MTD device size:            122 MiB
UBI: physical eraseblock size:   131072 bytes (128 KiB)
UBI: logical eraseblock size:    126976 bytes
UBI: number of good PEBs:        978
UBI: number of bad PEBs:         0
UBI: smallest flash I/O unit:    2048
UBI: VID header offset:          2048 (aligned 2048)
UBI: data offset:                4096
UBI: max. allowed volumes:       128
UBI: wear-leveling threshold:    256
UBI: number of internal volumes: 1
UBI: number of user volumes:     7
UBI: available PEBs:             85
UBI: total number of reserved PEBs: 893
UBI: number of PEBs reserved for bad PEB handling: 9
UBI: max/mean erase counter: 658/157
f3865 > ubi   ubifsls /
UBIFS not mounted, use ubifs mount to mount volume first!
f3865 > ubifsls /    mount          verzsi   sion

U-Boot 2011.12
Version: 5.28.0-full (Feb 12 2016 - 16:14:33) 
Copyright (C) 2011 - 2013 Sagemcom All rights reserved
mips-openwrt-linux-uclibc-gcc (GCC) 4.4.2
GNU ld (GNU Binutils) 2.20.1
f3865 > ubfi  fs      i
ubi - ubi commands

Usage:
ubi part [part] [offset]
 - Show or set current partition (with optional VID header offset)
ubi info [l[ayout]] - Display volume and ubi layout information
ubi create[vol] volume [size] [type] - create volume name with size
ubi write[vol] address volume size - Write volume from address with size
ubi read[vol] address volume [size] - Read volume to address with size
ubi remove[vol] volume - Remove volume
[Legends]
 volume: character name
 size: specified in bytes
 type: s[tatic] or d[ynamic] (default=dynamic)
f3865 > ubi part
Device 0: nand0, partition partAll
f3865 > ubi inof  fo
UBI: MTD device name:            "mtd=1"
UBI: MTD device size:            122 MiB
UBI: physical eraseblock size:   131072 bytes (128 KiB)
UBI: logical eraseblock size:    126976 bytes
UBI: number of good PEBs:        978
UBI: number of bad PEBs:         0
UBI: smallest flash I/O unit:    2048
UBI: VID header offset:          2048 (aligned 2048)
UBI: data offset:                4096
UBI: max. allowed volumes:       128
UBI: wear-leveling threshold:    256
UBI: number of internal volumes: 1
UBI: number of user volumes:     7
UBI: available PEBs:             85
UBI: total number of reserved PEBs: 893
UBI: number of PEBs reserved for bad PEB handling: 9
UBI: max/mean erase counter: 658/157
f3865 > ubifs  mount 
ubifsmount - mount UBIFS volume

Usage:
ubifsmount <volume-name>
    - mount 'volume-name' volume
f3865 > ubifsmount              bsloa     @s  bdinfo
Unknown command 'bdinfo' - try 'help'
f3865 > help
?       - alias for 'help'
base    - print or set address offset
bcmled  - bcmled led_hex_value

boot    - boot default, i.e., run 'bootcmd'
bootd   - boot default, i.e., run 'bootcmd'
bootm   - boot application image from memory
bootp   - boot image via network using BOOTP/TFTP protocol
chpart  - change active partition
cie     - displays the CIE parameter
cie_set - sets the CIE parameter
cmp     - memory compare
cp      - memory copy
crc32   - checksum calculation
dfa     - displays the DFA parameter
dfa_set - sets the DFA parameter
dhcp    - boot image via network using DHCP/TFTP protocol
editenv - edit environment variable
env     - environment handling commands
flag    - displays the factory flags
flag_set- sets one factory flag
fsinfo  - print information about filesystems
fsload  - load binary file from a filesystem image
go      - start application at address 'addr'
help    - print command description/usage
iminfo  - print header information for application image
itest   - return true/false on integer compare
loop    - infinite loop on address range
ls      - list files in a directory (default /)
md      - memory display
mii     - MII utility commands
mm      - memory modify (auto-incrementing address)
mtdparts- define flash/nand partitions
mtest   - simple RAM read/write test
mw      - memory write (fill)
nand    - NAND sub-system
nboot   - boot from NAND device
nm      - memory modify (constant address)
ping    - send ICMP ECHO_REQUEST to network host
printenv- print environment variables
reset   - Perform RESET of the CPU
run     - run commands in an environment variable
saveenv - save environment variables to persistent storage
sb      - secure boot
secure_set- sets the bootloader in secure mode
setenv  - set environment variables
sleep   - delay execution for some time
source  - run script from memory
tftpboot- boot image via network using TFTP protocol
ubi     - ubi commands
ubifsload- load file from an UBIFS filesystem
ubifsls - list files in a directory
ubifsmount- mount UBIFS volume
ubifsumount- unmount UBIFS volume
version - print monitor, compiler and linker version
waitForMagic- Test WAIT_FOR_MAGIC function
f3865 > chpart
no partition id specified
f3865 > mtdparts

device nand0 <nand>, # parts = 3
 #: name		size		offset		mask_flags
 0: bcm                 0x000c0000	0x00000000	0
 1: partAll             0x07a40000	0x000c0000	0
 2: data                0x00500000	0x07b00000	0

active partition: nand0,0 - (bcm) 0x000c0000 @ 0x00000000

defaults:
mtdids  : nand0=nand
mtdparts: mtdparts=nand:768k(bcm),125184k(partAll),5120k(data)
f3865 > md 
md - memory display

Usage:
md [.b, .w, .l] address [# of objects]
f3865 > md 0xb   0xb8000000 1
b8000000: ffffffff    ....
f3865 > md 0xb8000000 1 10
b8000000: ffffffff ffffffff ffffffff ffffffff    ................
b8000010: ffffffff ffffffff ffffffff ffffffff    ................
b8000020: ffffffff ffffffff ffffffff ffffffff    ................
b8000030: ffffffff ffffffff ffffffff ffffffff    ................
